#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#include <stdbool.h>
#include <stdlib.h>

bool check_dot_string(char* my_string)
{
    int length = strlen(my_string);
    if (length > 20)
    {
        return false;
    }

    int i = 0;
    int dot_count = 0;
    if (my_string[i] == '-') i ++;
    for (; i < strlen(my_string); i ++)
    {
        if (my_string[i] == '.')
        {
            dot_count++;
        }
        else
        {
            if(my_string[i] < '0' || my_string[i] > '9')
        {
            return false;
        }
        }
    }
    if (dot_count != 1)
        {
            return false;
        }

    return true;
}

bool check_string(char* my_string)
{
    int length = strlen(my_string);
    if (length > 20)
    {
        return false;
    }

    int i = 0;
    if (my_string[i] == '-') i++;

    for (; i < strlen(my_string); i ++)
    {
        if(my_string[i] < '0' || my_string[i] > '9')
        {
            return false;
        }
    }

    return true;
}

void solve_quadratic_equation(double* array, int count, double eps, double* roots) {
    double a, b, c;
    int root_index = 0;
    for (int i = 0; i < count; i += 3)
    {
        a = array[i];
        b = array[i+1];
        c = array[i+2];
        double D = b*b - 4*a*c;
        if (D > eps)
        {
            double x1 = (-b + sqrt(D)) / (2*a);
            double x2 = (-b - sqrt(D)) / (2*a);
            roots[root_index++] = x1;
            roots[root_index++] = x2;
        }
        else if (fabs(D) < eps)
        {
            double x = -b / (2*a);
            roots[root_index] = x;
            root_index++;
        } else
        {
            printf("No real roots\n");
        }
    }
}


void swap(double *a, double *b) {
    double temp = *a;
    *a = *b;
    *b = temp;
}

int koeficients_permutation(double lst[], int n, double* array) {
    int count = 0;
    if (n < 2) {
        for (int i = 0; i < 3; i++) {
            array[count] = lst[i];
            count++;
        }
        return count;
    }
    for (int i = 0; i < n; i++) {
        swap(&lst[i], &lst[n-1]);
        count += koeficients_permutation(lst, n-1, array + count);
        swap(&lst[i], &lst[n-1]);
    }
    return count;
}

bool check_triangle(double epsilon, double x, double y, double z)
{
    if ((fabs(x * x + y*y - z*z) < epsilon) || (fabs(y*y + x*x - z*z) < epsilon) || (fabs(x*x + z*z - y*y) < epsilon)
       || (fabs(y*y + z*z - x*x) < epsilon) || (fabs(z*z + y*y - x*x) < epsilon) || (fabs(z*z + x*x - y*y) < epsilon))
    {
        return true;
    }
    else
    {
        return false;
    }
}

bool check_multiplicity(int a, int b)
{
    if ((a % b) == 0)
    {
        return true;
    }
    else
    {
        return false;
    }
}

int main(int argc, char* argv[])
{
    if ((argc < 4) || (argc > 6))
    {
        printf("Usage: program_name <flag> <epsilon> <a> <b> <c>\n");
        return 1;
    }

    char flag = argv[1][1];
    switch(flag)
    {
        case 't':
        {   
            if ((check_dot_string(argv[2])) && (check_dot_string(argv[3])) && (check_dot_string(argv[4])) && (check_dot_string(argv[5])))
            {
                printf("check_string - OK\n");
            }
            else
            {
                printf("Invalid input value!\n");
                return 0;
            }

            double epsilon = atof(argv[2]);
            double x = atof(argv[3]);
            double y = atof(argv[4]);
            double z = atof(argv[5]);

            if (check_triangle(epsilon, x, y, z))
            {
                printf("Yes, it may be a triangle!\n");
            }
            else
            {
                printf("No, this may not be a triangle!\n");
            }
            break;
        }
        case 'm':
        {   
            if ((check_string(argv[2])) && (check_string(argv[3])))
            {
                printf("check_string - OK\n");
            }
            else
            {
                printf("Invalid input value!\n");
                return 0;
            }
            int a = atoi(argv[2]);
            int b = atoi(argv[3]);
            
            if((a == 0) || (b == 0))
            {
                printf("This flag will only work with non-zero values!\n");
                break;
            }

            if (check_multiplicity(a,b))
            {
                printf("Yes, these numbers are multiples!\n");
                break;
            }
            else
            {
                printf("No, these numbers are not multiples!\n");
                break;
            }
        }
        case 'q':
        {   
            if ((check_dot_string(argv[2])) && (check_dot_string(argv[3])) && (check_dot_string(argv[4])) && (check_dot_string(argv[5])))
            {
                printf("check_string - OK\n");
            }
            else
            {
                printf("Invalid input value!\n");
                return 0;
            }

            double eps = atof(argv[2]);
            int n = 3;
            double lst[n];
            for (int i = 0; i < n; i ++)
            {
                lst[i] = atof(argv[i+3]);
            }
            double roots[12] = {0};
            double array[18] = {0};
            int count = koeficients_permutation(lst, n, array);
            solve_quadratic_equation(array, count, eps, roots);
            for(int j = 0; j < 12; j++)
            {
                printf("%.1f ", roots[j]);
                printf("\n");
            }
            printf("\n");
            break;
        }
        default:
            printf("Invalid flag\n");
            return 1;
    }

    return 0;
}
