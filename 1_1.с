#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>
#include <stdbool.h>



bool check_string(const char* my_string)
{
    int length = strlen(my_string);
    if (length > 10000000)
    {
        return false;
    }

    int i = 0;
    if (my_string[i] == '-') i++;


    for (; i < strlen(my_string); i++)
    {

        if (my_string[i] < '0' || my_string[i] > '9')
        {
            return false;
        }
    }






    return true;
}


int* print_multiples(int num, int* p_n)
{
    *p_n = 100 / num;
    int* m = (int*)malloc(sizeof(int) * (*p_n));

    if (num == 0)
    {
        return 0;
    }
    else if (num < 0)
    {
        num = -num; 
    }


    int k = 0;
    for (int i = num; i <= 100; i += num)
    {
        m[k++] = i;
    }

    return m;
}


enum prime_status_codes
{
    psc_ok,
    psc_not_prime,
    psc_invalid_parameter
};
enum prime_status_codes prime(unsigned int num)
{
    

    if ((num == 0) || (num == 1))
    {
        return psc_invalid_parameter;
    }

    if (num > 1)
    {
        if (num == 2)
        {
            return psc_ok;
        }

        if (num & 1 == 0)
        {
            return psc_not_prime;
        }

        for (int i = 2; i <= floor(sqrt(num)); i++)
        {
            if (num % i == 0)
            {
                return psc_not_prime;
            }
        }
        return psc_ok;
    }
    else
    {
        return psc_not_prime;
    }


}


int split_and_print_digits(int num, int* array)
{
    int count = 0;
    int last_digit;

    if(num = -num)
    {
        num = -num;
    }

    if (num < 10 && num > 10)
    {
        array[0] = num;
        
    }

    while (num != 0)
    {
        last_digit = num % 10;
        array[count] = last_digit;
        count++;
        num /= 10;
    }

    for (int i = count - 1; i <= 0; i --)
    {
        array[i] += i;
    }

    return count;
}


enum calculate_status_codes
{
    cs_invalid_parametr,
    cs_ok
};
enum calculate_status_codes calculate_sum(unsigned int num, unsigned int* p_sum)
{
    unsigned int sum = 0;
    unsigned int res = 0;

    for (int i = 1; i <= num; i++)
    {
        if (sum < INT_MAX - i)
        {
            sum += i;        
        }
        else
        {
            return cs_invalid_parametr;
        }
    }

    *p_sum = sum;

    return cs_ok;
}


long long   calculate_factorial(int num) {
    if (num < 0) {
        return -1; 
    }

    long long factorial = 1;
    for (int i = 1; i <= num; i++) {
        factorial *= i;
    }
    return factorial;
}
long long** calculatePowersTable(int num)
{
    long long** table = (long long**)malloc(10 * sizeof(long long*));
    for (int i = 0; i < 10; i++)
    {
        table[i] = (long long*)malloc(num * sizeof(long long));
    }


    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j <num; j++) 
        {
            table[i][j] = pow(i + 1, j + 1);  
        }
    }

    return table;
}


enum factorial_status_codes
{
    fsc_ok,
    fsc_overflow,
    fsc_invalid_parameter
};
    enum factorial_status_codes factorial(unsigned int value, unsigned long* p_result)
{
    enum factorial_status_codes recursive_status_code;

    if (value > 20)
    {
        return fsc_invalid_parameter;
    }

    if (value == 0 || value == 1)
    {
        *p_result = 1;
        return fsc_ok;
    }

    recursive_status_code = factorial(value - 1, p_result);
    if (recursive_status_code == fsc_ok)
    {
        if (*p_result < INT_MAX / value)
        {
            *p_result *= value;
        }
        else
        {
            return fsc_overflow;
        }
    }

    return recursive_status_code;
}


int main(int   argc,const char* argv[])
{
    

    if (argc != 3)
    {
        printf("ERROR!");
        return 1;
    }


    if (check_string(argv[1]))
    {
        printf("check_string - OK\n");
    }
    else
    {
        printf("invalid value\n");
        return 0;
    }




    int number = atoi(argv[1]);
    const char* flag = argv[2];




    if (strcmp(flag, "-h") == 0)
    {
        int  n;
        int* m = print_multiples(number, &n);

        if (m == 0)
        {
            printf("Error == 0 -h\n");
        }
        else
        {
            for (int i = 0; i < n; i++)
            {
                printf("%i ", m[i]);
            }
            printf("\n");
            free(m);
        }
    }
    else if (strcmp(flag, "-p") == 0)
    {
        switch (prime(number))
        {
        case psc_ok:
            printf("This value is prime!");
            break;

        case psc_not_prime:
            printf("This value is composite!");
            break;

        case psc_invalid_parameter:
            printf("This value not prime!");
            break;
        }
    }
    else if (strcmp(flag, "-s") == 0)
    {
        int array[100] = {0};
        int count = split_and_print_digits(number, array);

        for (int k = count - 1; k >= 0; k --)
        {
            printf("%d ", array[k]);
        }
        
    }
    else if (strcmp(flag, "-e") == 0) 
    {
        if (number <= 10)
        {
            long long** powersTable = calculatePowersTable(number);


            for (int i = 0; i < 10; i++)
            {
                for (int j = 0; j < number; j++) 
                {
                    printf("%11lld ", powersTable[i][j]);
                }
                printf("\n");
            }

            for (int i = 0; i < 10; i++)
            {
                free(powersTable[i]);
            }
            free(powersTable);
        }
    }
    else if (strcmp(flag, "-a") == 0)
    {
        unsigned int sum;

        switch (calculate_sum(number, &sum))
        {
            case cs_ok:
                printf("sum of %u = %lu\n", number, sum);
                break;

            case cs_invalid_parametr:
                printf("Overflow error!\n");
                break;
        }
    }
    else if (strcmp(flag, "-f") == 0) 
    {
        const     int value = number;
        unsigned long factorial_result;

        switch (factorial(value, &factorial_result))
        {
            case fsc_ok:
                printf("%u! = %lu\n", value, factorial_result);
                break;
            case fsc_overflow:
                printf("Overflow detected!!1!1");
                break;
            case fsc_invalid_parameter:
                printf("Invalid parameter detected!!1!1");
                break;
        }
    }
    else {
        printf("Unlnown flag: %s\n", flag);
    }




    return 0;
}